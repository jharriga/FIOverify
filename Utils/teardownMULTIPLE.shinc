#-------------------------------------
# TEARDOWN_MULTIPLE.shinc
# Tears-down the XFSCACHED configurations
#

updatelog "teardownMULTIPLE.sh begin"

# Store mountID for root fs
rootID=$(stat -c%d /)

############################
updatelog "Working on WRITETHROUGH XFSCACHED devices"

# FOR Loop - remove the number of specified XFSCACHED devices
#   Operations: umount, lvremove, vgremove, pvremove
for (( cntr2=0; cntr2 < $numdevs; cntr2++ )); do
  # Assign vars for this loop
  slowdev="${WTslowDEV_arr[$cntr2]}"
  fastdev="${WTfastDEV_arr[$cntr2]}"
  cachevg="${WTcacheVG}$cntr2"
  cachedlv="${WTcachedLV}$cntr2"
  cachedmnt="${WTcachedMNT}$cntr2"

  # If mounted then umount
  if [ -d "$cachedmnt" ]; then
    cacheID=$(stat -c%d "${cachedmnt}")
    if (( rootID == cacheID )); then
      updatelog "${cachedmnt} not mounted - skip umount"
    else
      updatelog "${cachedmnt} being umounted and removed"
      umount ${cachedmnt} || error_exit "$LINENO: Unable to umount ${cachedmnt}"
      rmdir  ${cachedmnt} || error_exit "$LINENO: Unable to rmdir ${cachedmnt}"
    fi
  fi

  # Remove the cached LV
  cachedlvpath="/dev/${cachevg}/${cachedlv}"
  lvremove --force ${cachedlvpath} || \
    error_exit "$LINENO: Unable to lvremove ${cachedlvpath}"
  updatelog "lvremove of ${cachedlvpath} complete"

  # Remove the VG
  vgremove --force ${cachevg} || \
    error_exit "$LINENO: Unable to vgremove ${cachevg}"
  updatelog "vgremove of ${cachevg} complete"

  # Remove the PVs
  pvremove --force --yes ${fastdev} || \
    error_exit "$LINENO: Unable to pvremove ${fastdev}"
  updatelog "pvremove of ${fastdev} complete"
  pvremove --force --yes ${slowdev} || \
    error_exit "$LINENO: Unable to pvremove ${slowdev}"
  updatelog "pvremove of ${slowdev} complete"
done       # end FOR

############################
updatelog "Working on WRITEBACK XFSCACHED devices"

# FOR Loop - remove the number of specified XFSCACHED devices
#   Operations: umount, lvremove, vgremove, pvremove
for (( cntr3=0; cntr3 < $numdevs; cntr3++ )); do
  # Assign vars for this loop
  slowdev="${WBslowDEV_arr[$cntr3]}"
  fastdev="${WBfastDEV_arr[$cntr3]}"
  cachevg="${WBcacheVG}$cntr3"
  cachedlv="${WBcachedLV}$cntr3"
  cachedmnt="${WBcachedMNT}$cntr3"

  # If mounted then umount
  if [ -d "$cachedmnt" ]; then
    cacheID=$(stat -c%d "${cachedmnt}")
    if (( rootID == cacheID )); then
      updatelog "${cachedmnt} not mounted - skip umount"
    else
      updatelog "${cachedmnt} being umounted and removed"
      umount ${cachedmnt} || error_exit "$LINENO: Unable to umount ${cachedmnt}"
      rmdir  ${cachedmnt} || error_exit "$LINENO: Unable to rmdir ${cachedmnt}"
    fi
  fi

  # Remove the cached LV
  cachedlvpath="/dev/${cachevg}/${cachedlv}"
  lvremove --force ${cachedlvpath} || \
    error_exit "$LINENO: Unable to lvremove ${cachedlvpath}"
  updatelog "lvremove of ${cachedlvpath} complete"

  # Remove the VG
  vgremove --force ${cachevg} || \
    error_exit "$LINENO: Unable to vgremove ${cachevg}"
  updatelog "vgremove of ${cachevg} complete"

  # Remove the PVs
  pvremove --force --yes ${fastdev} || \
    error_exit "$LINENO: Unable to pvremove ${fastdev}"
  updatelog "pvremove of ${fastdev} complete"
  pvremove --force --yes ${slowdev} || \
    error_exit "$LINENO: Unable to pvremove ${slowdev}"
  updatelog "pvremove of ${slowdev} complete"
done       # end FOR

updatelog "teardownMULTIPLE.sh done"
#
# END teardownMULTIPLE.shinc

